@model ResumeBuilder.Models.ViewModels.VMResume

@{
    // ViewData["Title"] = "Create";
    // Layout = "~/Views/Shared/_CustomLayout.cshtml";
    string[] entries = Enum.GetNames(typeof(EntryCategory));
}

<div class="container w-100">
    <div class="editable-content-cont">
        <h1 contenteditable="true" id="resume-name-input">
            @(Model.Name ?? "Untitled")
        </h1>
        <i class="fas fa-edit"></i>
    </div>
    <hr />
    <div class="main-container">
        <div class="resume-editor-container">
            <div class="accordion" id="customAccordion">
                <div class="editor">
                    <div class="accordion-item">
                        <div class="accordion-header">
                            <button class="accordion-button" style="display:flex; justify-content:end; text-align:end; padding:0.5rem 1rem;" type="button"
                                    onclick:preventDefault data-bs-toggle="collapse" data-bs-target="#collapse-resume" aria-expanded="false" aria-controls="collapse-resume" )">
                                Resume Info
                            </button>
                        </div>
                        <div id="collapse-resume" class="accordion-collapse collapse" data-bs-parent="#customAccordion">
                            <div id="resume-info-placeholder" class="accordion-body">
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <div class="accordion-header">
                            <button class="accordion-button" style="display:flex; justify-content:end; text-align:end; padding:0.5rem 1rem;" type="button"
                                    onclick:preventDefault data-bs-toggle="collapse" data-bs-target="#collapse-personal" aria-expanded="false" aria-controls="collapse-personal" )">
                                Personal Info
                            </button>
                        </div>
                        <div id="collapse-personal" class="accordion-collapse collapse" data-bs-parent="#customAccordion">
                            <div id="personal-info-placeholder" class="accordion-body">
                            </div>
                        </div>
                    </div>
                    @foreach (var item in entries)
                    {
                        <div class="accordion-item" id="@item-accordion-item">
                            <div class="accordion-header">
                                <div class="accordion-button" style="display:flex; justify-content:end; text-align:end; padding:0.5rem 1rem;" type="button"
                                     onclick:preventDefault data-bs-toggle="collapse" data-bs-target="#collapse-@item" aria-expanded="false" aria-controls="collapse-@item" )">
                                    @ProfileEntry.GetCategoryName(item)
                                    <div style="flex:1;align-content:end;">
                                        <button class="btn arrow-btn" type="button" id="move-up-btn">
                                            &#8679;
                                        </button>
                                        <button class="btn arrow-btn" type="button" id="move-down-btn">
                                            &#8681;
                                        </button>
                                        <buton class="btn-close" type="button" id="add-@item-btn" style="transform:rotate(45deg)" onclick:preventDefault></buton>
                                    </div>
                                </div>
                            </div>
                            <div id="collapse-@item" class="accordion-collapse collapse" data-bs-parent="#customAccordion">
                                <button id="load-@item-btn" type="button" onclick:preventDefault">
                                    Load from Profile
                                </button>
                                <div id="@item-list" class="accordion-body">
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group mt-2">
                <input type="button" id="resume-save-button" value="Save" class="btn btn-primary" />
                <input type="button" id="cancel-save-button" value="Cancel" class="btn btn-secondary" />
            </div>
        </div>
        <div id="resume-preview-container">
        </div>
    </div>
</div>

<button id="open-modal-btn" type="button" class="btn btn-primary" style="display:none" data-bs-toggle="modal" data-bs-target="#exampleModal">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @* <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1> *@
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<style>
    .arrow-btn {
        font-size: 20px;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js" integrity="sha512-rstIgDs0xPgmG6RX1Aba4KV5cWJbAMcvRCVmglpam9SoHZiUCyQVDdH2LPlxoHtrv17XWblE/V/PP+Tr04hbtA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js" integrity="sha512-xq+Vm8jC94ynOikewaQXMEkJIOBp7iArs3IhFWSWdRT3Pq8wFz46p+ZDFAR7kHnSFf+zUv52B3prRYnbDRdgog==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> *@
    <script type="text/javascript">

        $(document).ready(function () {
            let templateId = 1;
            let originalResumeCopy = {};

            function getResume() {
                $.ajax({
                    url: '@Url.Action("ResumeInfo")?resumeId=@Model.Id',
                    type: "GET",
                    dataType: "json",
                    success: function (response) {
                        originalResumeCopy = response;
                    },
                    error: function (request, status, error) {
                        console.log(request.responseText);
                    }
                });
            }

            $("#resume-cancel-button").click(function () {
                $.ajax({
                    url: '@Url.Action("ResumeInfo")?resumeId=@Model.Id',
                    type: "PUT",
                    data: originalResumeCopy,
                    dataType: "json",
                    success: function (response) {
                        window.location.replace('@Url.Action("Index")');
                    },
                    error: function (request, status, error) {
                        console.log(request.responseText);
                    }
                });
            })

            getResumePreview();

            // Resume Name

            $("#resume-save-button").click(function () {
                // const newName = $('#resume-name-input').val();
                // $.ajax({
                //     url: '@Url.Action("ResumeName")?resumeId=@Model.Id',
                //     type: "PUT",
                //     data: { resumeId: '@Model.Id', newName: newName },
                //     success: function (response) {
                //         window.location.replace('@Url.Action("Index")');
                //     },
                //     error: function (request, status, error) {
                //         console.log(request.responseText);
                //     }
                // });
            })

            // Resume Info
            loadResumeInfo();

            function loadResumeInfo() {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ResumeBasicInfoView")',
                    data: { resumeId: '@Model.Id'},
                    success: function (result) {
                        const container = $('#resume-info-placeholder');
                        $(container).empty();
                        $(container).append(result);
                    },
                    error: function () {
                        alert("Error trying to retrieve resume info");
                    }
                })
            }

            // Personal Info
            loadPersonalInfo();

            function loadPersonalInfo() {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("PersonalInfoView")',
                    data: { resumeId: '@Model.Id' },
                    success: function (result) {
                        const container = $('#personal-info-placeholder');
                        $(container).empty();
                        $(container).append(result);
                    },
                    error: function () {
                        alert("Error trying to retrieve personal info");
                    }
                })
            }

            // Profile Entries
            const entryCategories = @Html.Raw(Json.Serialize(entries));
            const accordionItemsContainer = $("div.editor");

            for(const entry of entryCategories){
                loadProfileEntries(entry);
                $("#load-"+entry+"-btn").click(function () {
                    $.ajax({
                        url: '@Url.Action("LoadProfileEntriesFromProfile")',
                        type: "GET",
                        data: {resumeId:'@Model.Id', category: entry},
                        success: function (response) {
                            getResumePreview();
                            loadProfileEntries(entry);
                        },
                        error: function (request, status, error) {
                            console.log(request.responseText);
                        }
                    });
                });
                $("#add-"+entry+"-btn").click(function () {
                    openEntryForm(entry);
                });

                var accordionItem = $("#"+entry+"-accordion-item");
                const upButton = $(accordionItem).find("#move-up-btn");
                const downButton = $(accordionItem).find("#move-down-btn");

                $(upButton).click(function(){
                    const item = $(this).parent().parent().parent().parent();
                    var currentIndex = $(item).index();
                    if(currentIndex==2)
                        return;
                    $(item).insertBefore($(accordionItemsContainer).children().eq(currentIndex-1));
                });

                $(downButton).click(function(){
                    const item = $(this).parent().parent().parent().parent();
                    var currentIndex = $(item).index();
                    const accordionItemsCount = $(accordionItemsContainer).children().length -1;
                    if(currentIndex == accordionItemsCount)
                        return;
                    $(item).insertAfter($(accordionItemsContainer).children().eq(currentIndex+1));
                });

                // $("#add-"+entry+"-btn").click(function () {
                //     openEntryForm(entry);
                // });
            }

            function loadProfileEntries(category) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ProfileEntriesView")',
                    data: { resumeId:'@Model.Id', category: category },
                    success: function (result) {
                        const container = "#" + category + "-list";
                        $(container).empty();
                        $(container).append(result);
                        const containerJs = $(container)[0];
                        let entries = containerJs.getElementsByClassName('profile-entry-container');
                        for (let i = 0; i < entries.length; i++) {
                            entries[i].classList.add('card');
                            entries[i].classList.add('mb-2');
                        }
                    },
                    error: function () {
                        alert("Error trying to retrieve Entries");
                    }
                })
            }

            function openEntryForm(category) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ProfileEntryForm")',
                    data: { resumeId:'@Model.Id', category: category},
                    success: function (result) {
                    },
                    error: function () {
                        alert("Error trying to retrieve AddProfileEntry");
                    }
                })
            }

            function updateCategoriesOrder(){
                let accordionItems = $(accordionItemsContainer).children();
                var categories = []
                for(let i=2;i<accordionItems.length;i++){
                    var id = $(accordionItems).attr('id');
                    console.log(id);
                    // categories[i-2]=
                }
            }

            // Preview
            function getResumePreview() {
                $.ajax({
                    url: '@Url.Action("ResumePreview")?templateid=' + templateId,
                    type: 'GET',
                    data: { resumeId: '@Model.Id', templateId: templateId },
                    success: function (response) {
                        // console.log(response.request);
                        console.log('response');
                        $("#resume-preview-container").empty();
                        $("#resume-preview-container").append(response);
                    },
                    error: function (request, status, error) {
                        console.log(request.responseText);
                    }
                });
            }

            // Request Observer
            $(document).ajaxSuccess(function (event, xhr, settings) {
            const url = new URL(settings.url, window.location.origin); // Parse the URL
            const path = url.pathname; // Extract the path (e.g., /PersonalInfoForm)
            if (path === '@Url.Action("PersonalInfoForm")') {//Load PersonalInfoForm to edit it
                showContentOnModal(xhr.responseText);
            } else if (path === '@Url.Action("PersonalInfo")') {//Save changes made on the PersonalInfoForm
                loadPersonalInfo();
                hideForm();
                getResumePreview();
            } else if (path === '@Url.Action("ProfileEntryForm")') {//Load ProfileEntryForm to edit it
                showContentOnModal(xhr.responseText);
            } else if (path === '@Url.Action("ProfileEntry")') {//Save changes made on the ProfileEntryForm
                const response = xhr.responseJSON;
                if(response!=null){
                    loadProfileEntries(response.category);
                }
                hideForm();
                getResumePreview();
            }
            else if (path === '@Url.Action("ResumeBasicInfoForm")') {//Save changes made on the ProfileEntryForm
                showContentOnModal(xhr.responseText);
            }
            else if (path === '@Url.Action("ResumeBasicInfo")') {//Save changes made on the ProfileEntryForm
                loadResumeInfo();
                hideForm();
                getResumePreview();
            }
            });

            var isModalWindowOpen = false;

            function showContentOnModal(content){
                isModalWindowOpen=true;
                $(".modal-body").empty();
                $(".modal-body").append(content);
                $(".modal-body").find("#cancel-btn").click(function () {
                    hideForm();
                });
                $("#open-modal-btn").trigger("click");
            }

            function hideForm() {                
                if(!isModalWindowOpen){
                    return;
                }
                
                $(".btn-close").trigger("click");
                isModalWindowOpen=false;
            }
        });
    </script>
}