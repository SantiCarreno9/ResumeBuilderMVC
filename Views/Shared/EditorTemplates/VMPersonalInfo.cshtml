@model ResumeBuilder.Models.ViewModels.VMPersonalInfo
@{
    //Editor Version
    string? context = null;
    if (ViewData.ContainsKey("Context") && ViewData["Context"] != null)
        context = ViewData["Context"]!.ToString();
    string? resumeId = null;
    if (ViewData.ContainsKey("ResumeId") && ViewData["ResumeId"] != null)
        resumeId = ViewData["ResumeId"]!.ToString();
}

<div id="personal-info-form" class="d-flex">
    <div style="flex:1;margin:1em 0;">
        <form asp-action="Create" id="form">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-floating mb-2">
                <input asp-for="FirstName" class="form-control editable-field" id="first-name-input" />
                <label asp-for="FirstName" class="control-label"></label>
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-2">
                <input asp-for="LastName" class="form-control editable-field" id="last-name-input" />
                <label asp-for="LastName" class="control-label"></label>
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-2">
                <input asp-for="Email" class="form-control editable-field" id="email-input" />
                <label asp-for="Email" class="control-label"></label>
            </div>
            <div class="form-floating mb-2">
                <input asp-for="PhoneNumber" class="form-control editable-field" id="phone-input" />
                <label asp-for="PhoneNumber" class="control-label"></label>
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-floating mb-2">
                <input asp-for="Address" class="form-control editable-field" id="address-input" />
                <label asp-for="Address" class="control-label"></label>
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="px-2">
                <h5>Additional Contact Info</h5>
                <ul class="list-group" id="additional-contacts-list">
                    <li class="row mb-2">
                        <select name="contacts" id="contact-title-select" class="form-select mx-2 w-50">
                            <option value=""></option>
                            <option value="LinkedIn">LinkedIn</option>
                            <option value="Website">Website</option>
                            <option value="GitHub">GitHub</option>
                            <option value="Portfolio">Portfolio</option>
                            <option value="Other">Other</option>
                        </select>
                    </li>
                </ul>
            </div>
            <div id="additional-contacts-template" style="display:none">
                <li class="row mb-2 align-items-center d-flex flex-row">
                    <input id="name-input" type="text" class="form-control-plaintext mx-2" style="flex:1" />
                    <input id="value-input" type="text" class="form-control editable-field mx-2" style="flex:1" />
                    @if (context!.Equals("Resume"))
                    {
                        <div class="form-floating mb-2 resume-only">
                            <input type="text" class="form-control editable-field" id="display-name-input" />
                            <label for="display-name" class="control-label">Display Name</label>
                        </div>
                    }
                    <button id="delete-btn" type="button" class="btn-close mx-1"></button>
                </li>
            </div>
        </form>
    </div>
    <div id="user-create-btns" style="display:none">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
    <div id="edit-btns" class="mb-2">
        <div class="form-group">
            <button id="submit-btn" type="button" class="btn btn-primary">Save</button>
            <button id="cancel-btn" type="button" class="btn btn-secondary">Cancel</button>
        </div>
    </div>
</div>

<style>
    #personal-info-form {
        flex-direction: column;
    }

    .editable-field {
        border-bottom: var(--bs-border-width) solid var(--bs-border-color);
    }
</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js" integrity="sha512-rstIgDs0xPgmG6RX1Aba4KV5cWJbAMcvRCVmglpam9SoHZiUCyQVDdH2LPlxoHtrv17XWblE/V/PP+Tr04hbtA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js" integrity="sha512-xq+Vm8jC94ynOikewaQXMEkJIOBp7iArs3IhFWSWdRT3Pq8wFz46p+ZDFAR7kHnSFf+zUv52B3prRYnbDRdgog==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> *@

<script type="text/javascript">

    $(document).ready(function () {
        const parent = $("#personal-info-form");
        // ---------- Additional Contacts Logic ----------
        const additionalContactsList = $('#additional-contacts-list');
        const additionalContactTemplate = $("#additional-contacts-template")[0].firstElementChild;
        const contacTitleSelect = $("#contact-title-select");

        loadContacts();

        //Initialization

        $(parent).find("#submit-btn").click(function () {
            const form = $(parent).find("form");
            let endpoint = '@Url.Action("PersonalInfo")';
            if ('@context' == 'Resume') {
                endpoint = endpoint.concat("?resumeId=@resumeId");
            }
            if ($(form).valid()) {
                var formData = getFormData($(form));
                formData['AdditionalContactInfo'] = getAdditionalContactsJSON();
                $.ajax({
                    url: endpoint,
                    type: "PUT",
                    data: formData,
                    success: function (response) {
                    },
                    error: function (request, status, error) {
                        console.log(request.responseText);
                    }
                });
            }
        });

        $(contacTitleSelect).on('change', function () {
            setContactFromDropdown(contacTitleSelect[0]);
        });

        function getFormData(form) {
            var unindexed_array = $(form).serializeArray();
            var indexed_array = {};

            $.map(unindexed_array, function (n, i) {
                indexed_array[n['name']] = n['value'];
            });

            return indexed_array;
        }

        // ---------- Additional Contacts Logic ----------

        function loadContacts() {
            if('@(Model.AdditionalContactInfo == null)'=='True')
                return;
            let contacts = JSON.parse('@Html.Raw(Model.AdditionalContactInfo)');
            if(contacts!=null){
                for (let i = 0; i < contacts.length; i++) {
                    addAdditionalContact(contacts[i].name, contacts[i].value, contacts[i].displayName);
                }
            }
        }

        function getAdditionalContactsJSON() {
            var myObject = [];
            let index = 0;
            let contactsCount = $(additionalContactsList).children().length;
            console.log('contactsCount: '+contactsCount);
            if(contactsCount > 1){
                console.log('contactsCount>1');
                    for (const child of $(additionalContactsList).children()) {
                    let nameField = $(child).find('#name-input')[0];
                    let valueField = $(child).find('#value-input')[0];
                    if('@context'== 'Resume'){
                        let displayNameField = $(child).find('#display-name-input')[0];
                        myObject[index] = { name: nameField.value, value: valueField.value, displayName: displayNameField.value };
                    }
                    else{
                        myObject[index] = { name: nameField.value, value: valueField.value };
                    }
                    index++;
                    if (contactsCount - 1 == index)
                        break;
                    }
            }
            return JSON.stringify(myObject);
        }

        function updateContactListOptions(name = null, added = false) {
            if (contacTitleSelect == null)
                return;

            let dropdown = contacTitleSelect[0];
            if(name!="Other")
            {
                for (let i = 0; i < dropdown.options.length; i++) {
                if (dropdown.options[i].value == name)
                    dropdown.options[i].style.display = added ? "none" : "block";
                }
            }
            dropdown.value = "";
        }

        function setContactFromDropdown(select) {
            const value = select.value;
            addAdditionalContact(value);
        }

        function addAdditionalContact(name = null, value = null, displayName = null) {
            console.log('Name: ' + name + ' Value: ' + value);
            let newContact = additionalContactTemplate.cloneNode(true);
            let dropdown = $(contacTitleSelect).parent();

            $(newContact).insertBefore($(dropdown));
            $(newContact).find("#delete-btn").click(function () {
                    deleteAdditionalContact(newContact);
            });

            if (name != null) {
                let nameField = $(newContact).find('#name-input')[0];
                nameField.value = name;
                if (name == "Other") {
                    nameField.disabled = false;
                }
            }
            if (value != null) {
                let valueField = $(newContact).find('#value-input')[0];
                valueField.value = value;
            }

            if (displayName != null) {
                let displayNameField = $(newContact).find('#display-name-input')[0];
                if(displayNameField!=null)
                    displayNameField.value = displayName;
            }
            updateContactListOptions(name, true);
        }

        function deleteAdditionalContact(contact) {
            let option = $(contact).children().eq(0)[0];
            updateContactListOptions(option.value, false);
            contact.remove();
        }
    });


</script>
